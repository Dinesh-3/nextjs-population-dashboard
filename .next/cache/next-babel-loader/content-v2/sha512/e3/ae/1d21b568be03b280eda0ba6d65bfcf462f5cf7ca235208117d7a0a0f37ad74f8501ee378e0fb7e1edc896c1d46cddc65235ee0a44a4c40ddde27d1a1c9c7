{"ast":null,"code":"import axios from 'axios';\nimport { chartModel } from \"../services/chartModel\";\nimport { cloneDeep } from \"lodash\";\nconst URL = \"https://data-server-api-v2.herokuapp.com/data\"; // Fetch Data from NodeJS API\n\nconst fetchData = async () => {\n  try {\n    const data = (await axios.get(URL)).data.result;\n    return data;\n  } catch (error) {\n    return false;\n  }\n}; // Convert Response to Object\n\n\nconst getData = async () => {\n  const populationData = await fetchData();\n  const xAxis = [];\n  const density = [];\n  const landArea = [];\n  const population = [];\n  populationData.forEach((element, index) => {\n    if (index < 40) {\n      xAxis.push(element.country);\n      density.push(element.density);\n      landArea.push(element.land_area);\n      population.push(element.population);\n    }\n  });\n  chartModel[\"labels\"] = xAxis;\n  const populationChart = cloneDeep(chartModel);\n  populationChart[\"datasets\"][0][\"data\"] = population;\n  const densityChart = cloneDeep(chartModel);\n  densityChart[\"datasets\"][0][\"data\"] = density;\n  const landAreaChart = cloneDeep(chartModel);\n  landAreaChart[\"datasets\"][0][\"data\"] = landArea;\n  return {\n    populationChart,\n    densityChart,\n    landAreaChart\n  };\n};\n\nexport default getData;","map":{"version":3,"sources":["/home/user/Downloads/CHART/NextJS-FrameWork/services/fetchData.js"],"names":["axios","chartModel","cloneDeep","URL","fetchData","data","get","result","error","getData","populationData","xAxis","density","landArea","population","forEach","element","index","push","country","land_area","populationChart","densityChart","landAreaChart"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,MAAMC,GAAG,GAAG,+CAAZ,C,CAEA;;AACA,MAAMC,SAAS,GAAG,YAAY;AAC1B,MAAI;AACJ,UAAMC,IAAI,GAAG,CAAC,MAAML,KAAK,CAACM,GAAN,CAAUH,GAAV,CAAP,EAAuBE,IAAvB,CAA4BE,MAAzC;AACA,WAAOF,IAAP;AACC,GAHD,CAGE,OAAOG,KAAP,EAAc;AACZ,WAAO,KAAP;AACH;AACJ,CAPD,C,CASA;;;AACA,MAAMC,OAAO,GAAG,YAAY;AACxB,QAAMC,cAAc,GAAG,MAAMN,SAAS,EAAtC;AACA,QAAMO,KAAK,GAAG,EAAd;AACA,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,UAAU,GAAG,EAAnB;AACAJ,EAAAA,cAAc,CAACK,OAAf,CAAuB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACvC,QAAIA,KAAK,GAAG,EAAZ,EAAgB;AAChBN,MAAAA,KAAK,CAACO,IAAN,CAAWF,OAAO,CAACG,OAAnB;AACAP,MAAAA,OAAO,CAACM,IAAR,CAAaF,OAAO,CAACJ,OAArB;AACAC,MAAAA,QAAQ,CAACK,IAAT,CAAcF,OAAO,CAACI,SAAtB;AACAN,MAAAA,UAAU,CAACI,IAAX,CAAgBF,OAAO,CAACF,UAAxB;AACC;AACJ,GAPD;AASAb,EAAAA,UAAU,CAAC,QAAD,CAAV,GAAuBU,KAAvB;AAEA,QAAMU,eAAe,GAAGnB,SAAS,CAACD,UAAD,CAAjC;AACAoB,EAAAA,eAAe,CAAC,UAAD,CAAf,CAA4B,CAA5B,EAA+B,MAA/B,IAAyCP,UAAzC;AAEA,QAAMQ,YAAY,GAAGpB,SAAS,CAACD,UAAD,CAA9B;AACAqB,EAAAA,YAAY,CAAC,UAAD,CAAZ,CAAyB,CAAzB,EAA4B,MAA5B,IAAsCV,OAAtC;AAEA,QAAMW,aAAa,GAAGrB,SAAS,CAACD,UAAD,CAA/B;AACAsB,EAAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,CAA1B,EAA6B,MAA7B,IAAuCV,QAAvC;AAGA,SAAO;AACHQ,IAAAA,eADG;AAEHC,IAAAA,YAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CAhCD;;AAkCA,eAAed,OAAf","sourcesContent":["import axios from 'axios';\nimport {chartModel} from \"../services/chartModel\"\nimport { cloneDeep } from \"lodash\"\n\nconst URL = \"https://data-server-api-v2.herokuapp.com/data\"\n\n// Fetch Data from NodeJS API\nconst fetchData = async () => {\n    try {\n    const data = (await axios.get(URL)).data.result\n    return data\n    } catch (error) {\n        return false\n    }\n}\n\n// Convert Response to Object\nconst getData = async () => {\n    const populationData = await fetchData()\n    const xAxis = []\n    const density = []\n    const landArea = []\n    const population = []\n    populationData.forEach((element, index) => {\n        if (index < 40) {\n        xAxis.push(element.country)\n        density.push(element.density)\n        landArea.push(element.land_area)\n        population.push(element.population)   \n        }\n    });\n\n    chartModel[\"labels\"] = xAxis\n\n    const populationChart = cloneDeep(chartModel)\n    populationChart[\"datasets\"][0][\"data\"] = population\n\n    const densityChart = cloneDeep(chartModel)\n    densityChart[\"datasets\"][0][\"data\"] = density\n\n    const landAreaChart = cloneDeep(chartModel)\n    landAreaChart[\"datasets\"][0][\"data\"] = landArea\n\n    \n    return {\n        populationChart,\n        densityChart,\n        landAreaChart\n    }\n}\n\nexport default getData;"]},"metadata":{},"sourceType":"module"}