{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { chartModel } from \"../services/chartModel\";\nimport { cloneDeep } from \"lodash\";\nvar URL = \"https://data-server-api-v2.herokuapp.com/data\";\n\nvar fetchData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return axios.get(URL);\n\n          case 3:\n            data = _context.sent.data.result;\n            console.log(data);\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function fetchData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var populationData, xAxis, density, landArea, population, populationChart, densityChart, landAreaChart;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchData();\n\n          case 2:\n            populationData = _context2.sent;\n            xAxis = [];\n            density = [];\n            landArea = [];\n            population = [];\n            populationData.forEach(function (element, index) {\n              if (index < 40) {\n                xAxis.push(element.country);\n                density.push(element.density);\n                landArea.push(element.land_area);\n                population.push(element.population);\n              }\n            });\n            chartModel[\"labels\"] = xAxis;\n            populationChart = cloneDeep(chartModel);\n            populationChart[\"datasets\"][0][\"data\"] = population;\n            densityChart = cloneDeep(chartModel);\n            densityChart[\"datasets\"][0][\"data\"] = density;\n            landAreaChart = cloneDeep(chartModel);\n            landAreaChart[\"datasets\"][0][\"data\"] = landArea;\n            return _context2.abrupt(\"return\", {\n              populationChart: populationChart,\n              densityChart: densityChart,\n              landAreaChart: landAreaChart\n            });\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getData() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default getData;","map":{"version":3,"sources":["/home/user/Downloads/CHART/NextJS-FrameWork/services/fetchData.js"],"names":["axios","chartModel","cloneDeep","URL","fetchData","get","data","result","console","log","getData","populationData","xAxis","density","landArea","population","forEach","element","index","push","country","land_area","populationChart","densityChart","landAreaChart"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA,IAAMC,GAAG,GAAG,+CAAZ;;AAEA,IAAMC,SAAS;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGMJ,KAAK,CAACK,GAAN,CAAUF,GAAV,CAHN;;AAAA;AAGRG,YAAAA,IAHQ,iBAGsBA,IAHtB,CAG2BC,MAH3B;AAIdC,YAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAJc,6CAKPA,IALO;;AAAA;AAAA;AAAA;AAAA,6CAQH,KARG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATF,SAAS;AAAA;AAAA;AAAA,GAAf;;AAYA,IAAMM,OAAO;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBN,SAAS,EAD1B;;AAAA;AACNO,YAAAA,cADM;AAENC,YAAAA,KAFM,GAEE,EAFF;AAGNC,YAAAA,OAHM,GAGI,EAHJ;AAINC,YAAAA,QAJM,GAIK,EAJL;AAKNC,YAAAA,UALM,GAKO,EALP;AAMZJ,YAAAA,cAAc,CAACK,OAAf,CAAuB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACvC,kBAAIA,KAAK,GAAG,EAAZ,EAAgB;AAChBN,gBAAAA,KAAK,CAACO,IAAN,CAAWF,OAAO,CAACG,OAAnB;AACAP,gBAAAA,OAAO,CAACM,IAAR,CAAaF,OAAO,CAACJ,OAArB;AACAC,gBAAAA,QAAQ,CAACK,IAAT,CAAcF,OAAO,CAACI,SAAtB;AACAN,gBAAAA,UAAU,CAACI,IAAX,CAAgBF,OAAO,CAACF,UAAxB;AACC;AACJ,aAPD;AASAd,YAAAA,UAAU,CAAC,QAAD,CAAV,GAAuBW,KAAvB;AAEMU,YAAAA,eAjBM,GAiBYpB,SAAS,CAACD,UAAD,CAjBrB;AAkBZqB,YAAAA,eAAe,CAAC,UAAD,CAAf,CAA4B,CAA5B,EAA+B,MAA/B,IAAyCP,UAAzC;AAEMQ,YAAAA,YApBM,GAoBSrB,SAAS,CAACD,UAAD,CApBlB;AAqBZsB,YAAAA,YAAY,CAAC,UAAD,CAAZ,CAAyB,CAAzB,EAA4B,MAA5B,IAAsCV,OAAtC;AAEMW,YAAAA,aAvBM,GAuBUtB,SAAS,CAACD,UAAD,CAvBnB;AAwBZuB,YAAAA,aAAa,CAAC,UAAD,CAAb,CAA0B,CAA1B,EAA6B,MAA7B,IAAuCV,QAAvC;AAxBY,8CA2BL;AACHQ,cAAAA,eAAe,EAAfA,eADG;AAEHC,cAAAA,YAAY,EAAZA,YAFG;AAGHC,cAAAA,aAAa,EAAbA;AAHG,aA3BK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPd,OAAO;AAAA;AAAA;AAAA,GAAb;;AAiCA,eAAeA,OAAf","sourcesContent":["import axios from 'axios';\nimport {chartModel} from \"../services/chartModel\"\nimport { cloneDeep } from \"lodash\"\n\nconst URL = \"https://data-server-api-v2.herokuapp.com/data\"\n\nconst fetchData = async () => {\n    // console.log(data)\n    try {\n    const data = (await axios.get(URL)).data.result\n    console.log(data);\n    return data\n    } catch (error) {\n        // console.log({error});\n        return false\n    }\n}\n\nconst getData = async () => {\n    const populationData = await fetchData()\n    const xAxis = []\n    const density = []\n    const landArea = []\n    const population = []\n    populationData.forEach((element, index) => {\n        if (index < 40) {\n        xAxis.push(element.country)\n        density.push(element.density)\n        landArea.push(element.land_area)\n        population.push(element.population)   \n        }\n    });\n\n    chartModel[\"labels\"] = xAxis\n\n    const populationChart = cloneDeep(chartModel)\n    populationChart[\"datasets\"][0][\"data\"] = population\n\n    const densityChart = cloneDeep(chartModel)\n    densityChart[\"datasets\"][0][\"data\"] = density\n\n    const landAreaChart = cloneDeep(chartModel)\n    landAreaChart[\"datasets\"][0][\"data\"] = landArea\n\n    \n    return {\n        populationChart,\n        densityChart,\n        landAreaChart\n    }\n}\nexport default getData;"]},"metadata":{},"sourceType":"module"}